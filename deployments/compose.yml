networks:
  meridian_network:
    driver: bridge
volumes:
  messaging_postgres_data:
  identity_postgres_data:
  integration_postgres_data:
  zookeeper_data:
  kafka_data:
  traefik_logs:
  messaging_redis_data:
  identity_redis_data:
  integration_redis_data:

services:
  traefik:
    image: traefik:latest
    container_name: meridian_traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml:ro"
      - "./traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro"
      - "traefik_logs:/var/log/traefik"
    networks:
      - meridian_network
    labels:
      - "traefik.enable=true"
  frontend:
    build:
      context: ../
      dockerfile: deployments/frontend/Dockerfile
    container_name: meridian_frontend
    networks:
      - meridian_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    restart: unless-stopped

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: meridian_zookeeper
    networks:
      - meridian_network
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    restart: unless-stopped
  kafka:
    image: bitnami/kafka:latest
    container_name: meridian_kafka
    networks:
      - meridian_network
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller # Run as both broker and controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=INTERNAL://:9093,EXTERNAL://:9092,CONTROLLER://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9093,EXTERNAL://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9094
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s
    depends_on:
      - zookeeper
    restart: unless-stopped
  messaging_postgres:
    image: postgres:alpine
    container_name: meridian_postgres_messaging
    environment:
      POSTGRES_USER: ${MESSAGING_POSTGRES_USER}
      POSTGRES_PASSWORD: ${MESSAGING_POSTGRES_PASSWORD}
      POSTGRES_DB: ${MESSAGING_DB_NAME}
    networks:
      - meridian_network
    volumes:
      - messaging_postgres_data:/var/lib/postgresql/data
    ports:
      - "${MESSAGING_DB_PORT}:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${MESSAGING_POSTGRES_USER} -d ${MESSAGING_DB_NAME}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  messaging_redis:
    image: redis:7-alpine
    container_name: meridian_redis_messaging
    command: --port ${MESSAGING_REDIS_PORT}
    networks:
      - meridian_network
    ports:
      - "${MESSAGING_REDIS_PORT}:${MESSAGING_REDIS_PORT}"
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "${MESSAGING_REDIS_PORT}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - messaging_redis_data:/data
  messaging_migrate:
    build:
      context: ../
      dockerfile: deployments/migrate/Dockerfile
    container_name: meridian_messaging_migrate
    networks:
      - meridian_network
    depends_on:
      messaging_postgres:
        condition: service_healthy
    volumes:
      - ../internal/messaging/infrastructure/persistence/migrations:/migrations
    environment:
      MIGRATE_DB_URL_MIGRATE: "${MESSAGING_DB_URL_MIGRATE}"
    command:
      ["-path", "/migrations", "-database", "${MESSAGING_DB_URL_MIGRATE}", "up"]
  messaging:
    build:
      context: ../
      dockerfile: deployments/messaging/Dockerfile
    container_name: meridian_messaging_service
    depends_on:
      messaging_migrate:
        condition: service_completed_successfully
      messaging_postgres:
        condition: service_healthy
      messaging_redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      MESSAGING_DB_URL: "${MESSAGING_DB_URL}"
      MESSAGING_HTTP_PORT: ":${MESSAGING_HTTP_PORT}"
      MESSAGING_KAFKA_BROKERS: "${KAFKA_BROKERS}"
      MESSAGING_KAFKA_DEFAULT_TOPIC: "${MESSAGING_KAFKA_DEFAULT_TOPIC}"
      MESSAGING_GRPC_PORT: "${MESSAGING_GRPC_PORT}"
      MESSAGING_REDIS_URL: "${MESSAGING_REDIS_URL}"
      MESSAGING_ENVIRONMENT: "${MESSAGING_ENVIRONMENT}"
      MESSAGING_LOG_LEVEL: "${MESSAGING_LOG_LEVEL}"
      IDENTITY_GRPC_URL: "${IDENTITY_GRPC_URL}"
      INTEGRATION_GRPC_URL: "${INTEGRATION_GRPC_URL}"

    networks:
      - meridian_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.messaging.loadbalancer.server.port=8082"
    healthcheck:
      test:
        ["CMD", "curl", "-f", "http://localhost:${MESSAGING_HTTP_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
  identity_postgres:
    image: postgres:alpine
    container_name: meridian_postgres_identity
    environment:
      POSTGRES_USER: "${IDENTITY_POSTGRES_USER}"
      POSTGRES_PASSWORD: "${IDENTITY_POSTGRES_PASSWORD}"
      POSTGRES_DB: "${IDENTITY_DB_NAME}"
    networks:
      - meridian_network
    volumes:
      - identity_postgres_data:/var/lib/postgresql/data
    ports:
      - "${IDENTITY_DB_PORT}:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${IDENTITY_POSTGRES_USER} -d ${IDENTITY_DB_NAME}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
  identity_redis:
    image: redis:7-alpine
    container_name: meridian_redis_identity
    command: --port ${IDENTITY_REDIS_PORT}
    networks:
      - meridian_network
    ports:
      - "${IDENTITY_REDIS_PORT}:${IDENTITY_REDIS_PORT}"
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "${IDENTITY_REDIS_PORT}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - identity_redis_data:/data
  identity_migrate:
    build:
      context: ../
      dockerfile: deployments/migrate/Dockerfile
    container_name: meridian_identity_migrate
    networks:
      - meridian_network
    depends_on:
      identity_postgres:
        condition: service_healthy
    volumes:
      - ../internal/identity/infrastructure/persistence/migrations:/migrations
    environment:
      MIGRATE_DB_URL_MIGRATE: "${IDENTITY_DB_URL_MIGRATE}"
    command:
      ["-path", "/migrations", "-database", "${IDENTITY_DB_URL_MIGRATE}", "up"]
  identity:
    build:
      context: ../
      dockerfile: deployments/identity/Dockerfile
    container_name: meridian_identity_service
    networks:
      - meridian_network
    depends_on:
      identity_migrate:
        condition: service_completed_successfully
      identity_postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      identity_redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.identity.loadbalancer.server.port=8081"
    environment:
      IDENTITY_HTTP_PORT: ":${IDENTITY_HTTP_PORT}"
      IDENTITY_DB_URL: "${IDENTITY_DB_URL}"
      IDENTITY_KAFKA_BROKERS: "${KAFKA_BROKERS}"
      IDENTITY_KAFKA_DEFAULT_TOPIC: "${IDENTITY_KAFKA_DEFAULT_TOPIC}"
      IDENTITY_PASETO_PRIVATE_KEY: "${IDENTITY_PASETO_PRIVATE_KEY}"
      IDENTITY_PASETO_PUBLIC_KEY: "${IDENTITY_PASETO_PUBLIC_KEY}"
      IDENTITY_GRPC_PORT: "${IDENTITY_GRPC_PORT}"
      IDENTITY_REDIS_URL: "${IDENTITY_REDIS_URL}"
      AUTH_TOKEN_VALIDITY_MINUTES: "${AUTH_TOKEN_VALIDITY_MINUTES}"
      INTEGRATION_GRPC_URL: "${INTEGRATION_GRPC_URL}"
      IDENTITY_ENVIRONMENT: "${IDENTITY_ENVIRONMENT}"
      IDENTITY_LOG_LEVEL: "${IDENTITY_LOG_LEVEL}"
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD", "curl", "-f", "http://localhost:${IDENTITY_HTTP_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  integration_postgres:
    image: postgres:alpine
    container_name: meridian_postgres_integration
    environment:
      POSTGRES_USER: "${INTEGRATION_POSTGRES_USER}"
      POSTGRES_PASSWORD: "${INTEGRATION_POSTGRES_PASSWORD}"
      POSTGRES_DB: "${INTEGRATION_DB_NAME}"
    networks:
      - meridian_network
    volumes:
      - integration_postgres_data:/var/lib/postgresql/data
    ports:
      - "${INTEGRATION_DB_PORT}:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${INTEGRATION_POSTGRES_USER} -d ${INTEGRATION_DB_NAME}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
  integration_redis:
    image: redis:7-alpine
    container_name: meridian_redis_integration
    command: --port ${INTEGRATION_REDIS_PORT}
    networks:
      - meridian_network
    ports:
      - "${INTEGRATION_REDIS_PORT}:${INTEGRATION_REDIS_PORT}"
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "${INTEGRATION_REDIS_PORT}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - integration_redis_data:/data
  integration_migrate:
    build:
      context: ../
      dockerfile: deployments/migrate/Dockerfile
    container_name: meridian_integration_migrate
    networks:
      - meridian_network
    depends_on:
      integration_postgres:
        condition: service_healthy
    volumes:
      - ../internal/integration/infrastructure/persistence/migrations:/migrations
    environment:
      MIGRATE_DB_URL_MIGRATE: "${INTEGRATION_DB_URL_MIGRATE}"
    command:
      [
        "-path",
        "/migrations",
        "-database",
        "${INTEGRATION_DB_URL_MIGRATE}",
        "up",
      ]
  integration:
    build:
      context: ../
      dockerfile: deployments/integration/Dockerfile
    container_name: meridian_integration_service
    networks:
      - meridian_network
    depends_on:
      integration_migrate:
        condition: service_completed_successfully
      integration_postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      integration_redis:
        condition: service_healthy
    environment:
      INTEGRATION_HTTP_PORT: ":${INTEGRATION_HTTP_PORT}"
      INTEGRATION_DB_URL: "${INTEGRATION_DB_URL}"
      INTEGRATION_KAFKA_BROKERS: "${KAFKA_BROKERS}"
      INTEGRATION_KAFKA_DEFAULT_TOPIC: "${INTEGRATION_KAFKA_DEFAULT_TOPIC}"
      INTEGRATION_GRPC_PORT: "${INTEGRATION_GRPC_PORT}"
      INTEGRATION_REDIS_URL: "${INTEGRATION_REDIS_URL}"
      INTEGRATION_ENVIRONMENT: "${INTEGRATION_ENVIRONMENT}"
      INTEGRATION_LOG_LEVEL: "${INTEGRATION_LOG_LEVEL}"
      MESSAGING_GRPC_URL: "${MESSAGING_GRPC_URL}"

    labels:
      - "traefik.enable=true"
      - "traefik.http.services.integration.loadbalancer.server.port=8083"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:${INTEGRATION_HTTP_PORT}/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
